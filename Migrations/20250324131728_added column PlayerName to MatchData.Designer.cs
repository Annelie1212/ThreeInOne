// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ThreeInOne.Data;

#nullable disable

namespace ThreeInOne.Migrations
{
    [DbContext(typeof(ThreeInOneAppDbContext))]
    [Migration("20250324131728_added column PlayerName to MatchData")]
    partial class addedcolumnPlayerNametoMatchData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ThreeInOne.Data.CalculatorData", b =>
                {
                    b.Property<int>("CalculatorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CalculatorId"));

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Operation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Result")
                        .HasColumnType("float");

                    b.Property<double>("UserValue1")
                        .HasColumnType("float");

                    b.Property<double>("UserValue2")
                        .HasColumnType("float");

                    b.HasKey("CalculatorId");

                    b.ToTable("CalculatorData");
                });

            modelBuilder.Entity("ThreeInOne.Data.RockPaperScissorsMatchData", b =>
                {
                    b.Property<int>("MatchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MatchId"));

                    b.Property<double>("AverageWin")
                        .HasColumnType("float");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Loss")
                        .HasColumnType("int");

                    b.Property<string>("PlayerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Tie")
                        .HasColumnType("int");

                    b.Property<int>("Win")
                        .HasColumnType("int");

                    b.HasKey("MatchId");

                    b.ToTable("RockPaperScissorsMatchData");
                });

            modelBuilder.Entity("ThreeInOne.Data.RockPaperScissorsRoundData", b =>
                {
                    b.Property<int>("RoundId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoundId"));

                    b.Property<string>("ComputerMove")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Loss")
                        .HasColumnType("int");

                    b.Property<int>("MatchId")
                        .HasColumnType("int");

                    b.Property<string>("PlayerMove")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Tie")
                        .HasColumnType("int");

                    b.Property<int>("Win")
                        .HasColumnType("int");

                    b.HasKey("RoundId");

                    b.HasIndex("MatchId");

                    b.ToTable("RockPaperScissorsRoundData");
                });

            modelBuilder.Entity("ThreeInOne.Data.ShapesData", b =>
                {
                    b.Property<int>("ShapesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShapesId"));

                    b.Property<double>("AngleInDegrees")
                        .HasColumnType("float");

                    b.Property<double>("Area")
                        .HasColumnType("float");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<double>("Diagonal1")
                        .HasColumnType("float");

                    b.Property<double>("Diagonal2")
                        .HasColumnType("float");

                    b.Property<double>("Height")
                        .HasColumnType("float");

                    b.Property<double>("Perimeter")
                        .HasColumnType("float");

                    b.Property<string>("Shape")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("SideA")
                        .HasColumnType("float");

                    b.Property<double>("SideB")
                        .HasColumnType("float");

                    b.Property<double>("SideC")
                        .HasColumnType("float");

                    b.Property<double>("Width")
                        .HasColumnType("float");

                    b.HasKey("ShapesId");

                    b.ToTable("ShapesData");
                });

            modelBuilder.Entity("ThreeInOne.Data.RockPaperScissorsRoundData", b =>
                {
                    b.HasOne("ThreeInOne.Data.RockPaperScissorsMatchData", "Match")
                        .WithMany("Rounds")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Match");
                });

            modelBuilder.Entity("ThreeInOne.Data.RockPaperScissorsMatchData", b =>
                {
                    b.Navigation("Rounds");
                });
#pragma warning restore 612, 618
        }
    }
}
